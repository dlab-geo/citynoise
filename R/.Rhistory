plot(sfland_clip$geometry)
ggplot() +
geom_sf(data = sfland_clip, color = "black", fill = "white") +
geom_sf(data = sf_dots_geo, aes(color = group, fill = group), size = 0.1) +
ggplot() +
geom_sf(data = sfland_clip, color = "black", fill = "white") +
geom_sf(data = sf_dots_geo, aes(color = group, fill = group), size = 0.1)
ggplot() +
geom_sf(data = sfland_clip, color = "black", fill = "white") +
geom_sf(data = sf_dots_geo, aes(color = group, fill = group), size = 0.1)
ggplot() +
geom_sf(data = sfland_clip, color = "black", fill = "white") +
geom_sf(data = sf_dots_geo, aes(color = group, fill = group), size = 0.1) +
#geom_sf(data = sf_water, color = "lightblue", fill = "lightblue") +
geom_sf(data = sf_roads, color = "grey")
ggplot() +
geom_sf(data = sfland_clip, color = "black", fill = "white") +
geom_sf(data = sf_dots_geo, aes(color = group, fill = group), size = 0.1) +
#geom_sf(data = sf_water, color = "lightblue", fill = "lightblue") +
#geom_sf(data = sf_roads, color = "grey") +
#coord_sf(crs = 26918, datum = NA) +
scale_color_brewer(palette = "Set1", guide = FALSE)
ggplot() +
geom_sf(data = sfland_clip, color = "black", fill = "white") +
geom_sf(data = sf_dots_geo, aes(color = group, fill = group), size = 0.1) +
#geom_sf(data = sf_water, color = "lightblue", fill = "lightblue") +
#geom_sf(data = sf_roads, color = "grey") +
#coord_sf(crs = 26918, datum = NA) +
scale_color_brewer(palette = "Set1", guide = FALSE) +
#scale_fill_brewer(palette = "Set1") +
labs(title = "The racial geography of San Francisco",
subtitle = "2012-2016 ACS",
fill = "",
caption = "1 dot = approximately 100 people.\nData acquired with the R tidycensus and tigris packages.")
(32500 * .11) + 32500
(32000 * .11) + 32000
(x<-87756/0.85)
0.85 * 103000
7919.49 *12
32400 + (.11 * 32400)
32400 + (.12 * 32400)
(32400 + 650) + (.12 * (32400 + 650))
32400 + (.125 * 32400)
32400 + (.1225 * 32400)
32400 + (.122 * 32400)
32400 + (.12 * 32400)
32400 + (.121 * 32400)
32400 + (.1205 * 32400)
(32400 + 650) + (.1205 * (32400 + 650))
32400 + 650
34245 + (.11 * 34245)
32495 + (.11 * 32495)
(32400 + 550) + (.1205 * (32400 + 550))
32400 + (.1205 * 32400)
32400 + (.1205 * 32400)
(32400 + 550) + (.1205 * (32400 + 550))
(32400 + 550)
(32400 + 550) + (.1205 * (32400 + 550))
32400 + 550
32400 + 550
32400 + (.11 * 32400)
32950 + (.11 * 32950)
32495 + (32495*.11)
34245 + (34245 *.11)
32400 + (.1205 * 32400)
(32400 + 550) + (.1205 * (32400 + 550))
x<= 75%
x<- 75%
x<- "75%"
x
as.numeric(x)
?format
library(sf)
library(raster)
library(mlr)
library(dplyr)
library(parallelMap)
install.packages(c("mlr","parellelMap"))
library(sf)
library(raster)
library(mlr)
library(dplyr)
library(parallelMap)
data("landslides", package = "RSAGA")
install.packages("RSAGA")
data("landslides", package = "RSAGA")
head(landslides)
tail(landslides)
library(tmap)
tmap_mode("view")
tm_shape(landslides) + tm_dot()
tm_shape(landslides) + tm_dots()
class("landslides")
class("study_area")
head(study_area)
tm_shape(study_area) + tm_border()
tm_shape(study_area) + tm_boundary()
tm_shape(study_area) + tm_borders()
st_read?
?st_read
View(landslides)
ls_sf<-st_as_sf(landslides, coords = c("x", "y"),
crs = 4326, relation_to_geometry = "field")
?st_as_sf
ls_sf<-st_as_sf(landslides, coords = c("x", "y"),
crs = 4326)
View(ls_sf)
tm_shape(study_area) + tm_borders() +
tm_shape(ls_sf) + tm_dots()
tm_shape(study_area) + tm_borders() +
tm_shape(ls_sf) + tm_dots()
tm_shape(ls_sf) + tm_dots()
View(ls_sf)
View(landslides)
View(ls_sf)
View(landslides)
View(study_area)
View(landslides)
?tm_shape
ls_sf<-st_as_sf(landslides, coords = c("x", "y"),
crs = 4326, aggr="constant")
ls_sf<-st_as_sf(landslides, coords = c("x", "y"),
crs = 4326, agr="constant")
tm_shape(study_area) + tm_borders() +
tm_shape(ls_sf) + tm_dots()
tm_shape(ls_sf) + tm_dots()
View(ls_sf)
plot(ls_sf)
View(ls_sf)
non_pts = filter(landslides, lslpts == FALSE)
non_pts = filter(ls_sf, lslpts == FALSE)
lsl_pts = filter(ls_sf, lslpts == TRUE)
set.seed(11042018)
non_pts_sub = sample_n(non_pts, size = nrow(lsl_pts))
lsl = bind_rows(non_pts_sub, lsl_pts)
tm_shape(lsl_pts) + tm_dots()
View(lsl_pts)
View(lsl_pts)
View(lsl)
View(landslides)
dem = raster(
dem$data,
crs = dem$header$proj4string,
xmn = dem$header$xllcorner,
xmx = dem$header$xllcorner + dem$header$ncols * dem$header$cellsize,
ymn = dem$header$yllcorner,
ymx = dem$header$yllcorner + dem$header$nrows * dem$header$cellsize
)
plot(dem)
points(lsl_pts, add=T)
polys(study_area, add=T)
polygons(study_area, add=T)
plot(study_area, add=T)
plot(lsl_pts, add=T)
plot(non_pts, col="black", add=T)
plot(dem)
points(lsl_pts, add=T)
plot(lsl_pts, add=T)
plot(non_pts_sub), add=T)
plot(non_pts_sub, add=T)
data("lsl", package = "spDataLarge")
install.packages("spDataLarge")
data("lsl", package = "spDataLarge")
data("ta", package = "spDataLarge")
plot(dem)
plot(lsl, add=t)
type(lsl)
lsl
type(lsl)
class(lsl)
View(lsl)
fit = glm(lslpts ~ slope + cplan + cprof + elev + log10_carea,
family = binomial(),
data = lsl)
fit
library(sf)
library(dplyr)
library(purrr)
library(raster)
library(osmdata)
library(spDataLarge)
install.packages("osmdata")
library(osmdata)
download.file("https://tinyurl.com/ybtpkwxz",
destfile = "census.zip", mode = "wb")
unzip("census.zip") # unzip the files
census_de = readr::read_csv2(list.files(pattern = "Gitter.csv"))
data("census_de", package = "spDataLarge")
input = dplyr::select(census_de, x = x_mp_1km, y = y_mp_1km, pop = Einwohner,
women = Frauen_A, mean_age = Alter_D,
hh_size = HHGroesse_D)
# set -1 and -9 to NA
input_tidy = mutate_all(input, funs(ifelse(. %in% c(-1, -9), NA, .)))
View(input)
View(input_tidy)
input_ras = rasterFromXYZ(input_tidy, crs = st_crs(3035)$proj4string)
str(input_ras)
input_ras
rcl_pop = matrix(c(1, 1, 127, 2, 2, 375, 3, 3, 1250,
4, 4, 3000, 5, 5, 6000, 6, 6, 8000),
ncol = 3, byrow = TRUE)
rcl_women = matrix(c(1, 1, 3, 2, 2, 2, 3, 3, 1, 4, 5, 0),
ncol = 3, byrow = TRUE)
rcl_age = matrix(c(1, 1, 3, 2, 2, 0, 3, 5, 0),
ncol = 3, byrow = TRUE)
rcl_hh = rcl_women
rcl = list(rcl_pop, rcl_women, rcl_age, rcl_hh)
reclass = input_ras
for (i in seq_len(nlayers(reclass))) {
reclass[[i]] = reclassify(x = reclass[[i]], rcl = rcl[[i]], right = NA)
}
names(reclass) = names(input_ras)
reclass
pop_agg = aggregate(reclass$pop, fact = 20, fun = sum)
plot(pop_agg)
plot(reclass)
polys = pop_agg %>%
clump() %>%
rasterToPolygons() %>%
st_as_sf()
polys = pop_agg %>%
clump() %>%
rasterToPolygons() %>%
st_as_sf()
install.packages("igraph")
library(igraph)
polys = pop_agg %>%
clump() %>%
rasterToPolygons() %>%
st_as_sf()
plot(polys)
metros = polys %>%
group_by(clumps) %>%
summarize()
plot(metros)
?tm_polygons
library(tmap)
?tm_polygons
fbuffers_and_tracts$fprint_pop <- fbuffers_and_tracts$tract_popE *      fbuffers_and_tracts$fract_fprints
?updateSelect
?updateSelectizeInput
library(shinydashboard)     # Dashboard version of shiny
library(shinydashboardPlus) # Dashboard extras (mainly right sidebar)
library(shiny)              # Base shiny
library(shinyWidgets)       # For cool buttons, sliders, checkboxes, etc.
library(leaflet)            # For interactive maps
library(htmltools)          # Custom HTML control
library(RColorBrewer)       # Color palette management
library(shinycssloaders)    # For loading spinner/animation
library(shinyjs)
?updateSelectizeInput
library(tidycensus)
library(purrr)
library(sf)
options(tigris_use_cache = TRUE)
options(tigris_class = "sf")      # SP is the default format returned by tigris
# Set it
tigris_cache_dir("~/Documents/gis_data/census")  # Folder for local data
my_census_api_key <- "f2d6f4f743545d3a42a67412b05935dc7712c432"
ensus_api_key(my_census_api_key)
us <- unique(fips_codes$state)[1:51]
options(tigris_cache_dir("~/Documents/gis_data/census") ) # Folder for local data
options(tigris_cache_dir = "~/Documents/gis_data/census" ) # Folder for local data
Sys.getenv('TIGRIS_CACHE_DIR')
us <- unique(fips_codes$state)[1:51]
totalpop <- map_df(us, function(x) {
get_acs(geography = "tract", variables = "B01003_001",
state = x)
})
totalpop_sf <- reduce(
map(us, function(x) {
get_acs(geography = "tract", variables = "B01003_001",
state = x, geometry = TRUE)
}),
rbind
)
?viridis
??viridis
library(sf)
??st_simplify
?st_simplify
?st_buffer
library(rgda)
setwd("~/Downloads/simple_tracts100/ct2015_epsg5070/ct2015_epsg5070_20_35")
dir()
p1 <- st_read("ct_all_pts_5070.shp")
p2<- st_buffer(p1,10000)
?dissolve
p3<- st_union(p2)
head(-2)
head(p2)
plot(p2$geometry)
plot(p2[p2$STATEFP==$geometry)
plot(p2[p2$STATEFP=='06',]$geometry)
p3 <- st_geometry(p2)
p4 <- st_union(p3)
p5 = st_cast(p4, "POINT")
p5 = st_cast(p4, "POLYGON")
plot(p5)
plot(p1)
plot(p1$geometry)
pt_avg = p5 %>%
st_join(p1) %>%
summarize(avgdnlmean = mean(dnlmean, na.rm = TRUE))
head(p5)
?st_intersection
p6=st_intersection(p5,p1)
library(spData)
plot(nz)
head(nz)
head(nz_height)
plot(nz_height)
nz_avheight = aggregate(x = nz_height, by = nz, FUN = mean)
plot(nz_avheight)
head(p1)
p1_dnl = p1[c("mymean","geometry")]
p6_avg = aggregate(x=p1, by=p5, FUN=mean)
warnings()
head(p6_avg)
p6_avg = aggregate(x=p1_dnl, by=p5, FUN=mean)
head(p6_avg)
p6_avg$cat <- "low"
table(p6_avg$cat)
p6_avg$cat <- ifelse(p6_avg$dnlmean >= 55, "med",  p6_avg$cat)
table(p6_avg$cat)
p6_avg$cat <- ifelse(p6_avg$dnlmean >= 58, "high", p6_avg$cat)
table(p6_avg$cat)
table(p6_avg$cat)
head(p6_avg)
summary(p6_avg)
p6_avg$cat <- "low"
table(p6_avg$cat)
p6_avg$cat <- ifelse(p6_avg$mymean >= 55, "med",  p6_avg$cat)
table(p6_avg$cat)
p6_avg$cat <- ifelse(p6_avg$mymean >= 58, "high", p6_avg$cat)
table(p6_avg$cat)
p6_avg$cat <- "low"
table(p6_avg$cat)
p6_avg$cat <- ifelse(p6_avg$mymean >= 50, "med",  p6_avg$cat)
table(p6_avg$cat)
p6_avg$cat <- ifelse(p6_avg$mymean >= 55, "high", p6_avg$cat)
table(p6_avg$cat)
ctbuf10k_all_pts_4326 <- st_transform(p7_pts, 4326)
p7_pts <- st_centroid(p7)
ctbuf10k_all_pts_4326 <- st_transform(p7_pts, 4326)
p7 <- p6_avg[order(p6_avg$mymean, decreasing = FALSE),]
p7_pts <- st_centroid(p7)
ctbuf10k_all_pts_4326 <- st_transform(p7_pts, 4326)
head(ctbuf10k_all_pts_4326)
st_write(ctbuf10k_all_pts_4326, "ctbuf10k_all_pts_4326.geojson",delete_dsn=TRUE)
p2<- st_buffer(p1,5000)  # within 5KM
# Limit the object to just geometry
p3 <- st_geometry(p2)
p4 <- st_union(p3)
p5 = st_cast(p4, "POLYGON")
p1_dnl = p1[c("mymean","geometry")]
p6_avg = aggregate(x=p1_dnl, by=p5, FUN=mean)
head(p6_avg)
p6_avg$cat <- "low"
table(p6_avg$cat)
p6_avg$cat <- ifelse(p6_avg$mymean >= 50, "med",  p6_avg$cat)
table(p6_avg$cat)
p6_avg$cat <- ifelse(p6_avg$mymean >= 55, "high", p6_avg$cat)
table(p6_avg$cat)
p7 <- p6_avg[order(p6_avg$mymean, decreasing = FALSE),]
p7_pts <- st_centroid(p7)
plot(p7_points[['cat']])
plot(p7_pts[['cat']])
plot(p7_pts$geometry)
ctbuf10k_all_pts_4326 <- st_transform(p7_pts, 4326)
st_write(ctbuf10k_all_pts_4326, "ctbuf10k_all_pts_4326.geojson",delete_dsn=TRUE)
p2<- st_buffer(p1, 2500)  # within 5KM
# Limit the object to just geometry
p3 <- st_geometry(p2)
p4 <- st_union(p3)
p5 = st_cast(p4, "POLYGON")
p5 = st_cast(p4, "POLYGON")
plot(p5$geometry)
plot(p5)
p2<- st_buffer(p1, 300)  # within 2.5KM / 1.5 miles
# Limit the object to just geometry
p3 <- st_geometry(p2)
p4 <- st_union(p3)
p5 = st_cast(p4, "POLYGON")
plot(p5
)
p2<- st_buffer(p1, 3000)  # within 2.5KM / 1.5 miles
# Limit the object to just geometry
p3 <- st_geometry(p2)
p4 <- st_union(p3)
p5 = st_cast(p4, "POLYGON")
plot(p5)
p2<- st_buffer(p1, 4000)  # within 3KM / 1.86 miles
# Limit the object to just geometry
p3 <- st_geometry(p2)
p4 <- st_union(p3)
p5 = st_cast(p4, "POLYGON")
plot(p5)
plot(p1$geometry)
p1_dnl = p1[c("mymean","geometry")]
p6_avg = aggregate(x=p1_dnl, by=p5, FUN=mean)
head(p6_avg)
summary(p6_avg)
# Categorical variable
p6_avg$cat <- "low"
table(p6_avg$cat)
p6_avg$cat <- ifelse(p6_avg$mymean >= 50, "med",  p6_avg$cat)
table(p6_avg$cat)
p6_avg$cat <- ifelse(p6_avg$mymean >= 55, "high", p6_avg$cat)
table(p6_avg$cat)
p6_avg$cat <- "low"
table(p6_avg$cat)
p6_avg$cat <- ifelse(p6_avg$mymean >= 55, "med",  p6_avg$cat)
table(p6_avg$cat)
p6_avg$cat <- ifelse(p6_avg$mymean >= 58, "high", p6_avg$cat)
table(p6_avg$cat)
p6_avg$cat <- "low"
table(p6_avg$cat)
p6_avg$cat <- ifelse(p6_avg$mymean >= 54, "med",  p6_avg$cat)
table(p6_avg$cat)
p6_avg$cat <- ifelse(p6_avg$mymean >= 57, "high", p6_avg$cat)
table(p6_avg$cat)
p6_avg$cat <- "low"
table(p6_avg$cat)
p6_avg$cat <- ifelse(p6_avg$mymean >= 53, "med",  p6_avg$cat)
table(p6_avg$cat)
p6_avg$cat <- ifelse(p6_avg$mymean >= 56, "high", p6_avg$cat)
table(p6_avg$cat)
p6_avg$cat <- "low"
table(p6_avg$cat)
p6_avg$cat <- ifelse(p6_avg$mymean >= 50, "med",  p6_avg$cat)
table(p6_avg$cat)
p6_avg$cat <- ifelse(p6_avg$mymean >= 56, "high", p6_avg$cat)
table(p6_avg$cat)
table(p1$cat)
p6_avg$cat <- "low"
table(p6_avg$cat)
p6_avg$cat <- ifelse(p6_avg$mymean >= 50, "med",  p6_avg$cat)
table(p6_avg$cat)
p6_avg$cat <- ifelse(p6_avg$mymean >= 54, "high", p6_avg$cat)
table(p6_avg$cat)
p7 <- p6_avg[order(p6_avg$mymean, decreasing = FALSE),]
plot(p7[['cat']])
plot(p7['cat'])
p7_pts <- st_centroid(p7)
plot(p7_pts$geometry)
# Transform data to WGS84 (4326)
ctbuf10k_all_pts_4326 <- st_transform(p7_pts, 4326)
#
st_write(ctbuf10k_all_pts_4326, "ctbuf10k_all_pts_4326.geojson",delete_dsn=TRUE)
setwd("~/Downloads/simple_tracts100/ct2015_epsg5070/ct2015_epsg5070_20_35/dnlproj/R")
c1<- st_read("conus_counties_5m_4326.geojson")
c1dnl <- aggregate(x=p1_dnl, by=c1, FUN=mean)
c1.get_crs()
c1.crs
c1.to_crs
str(c1)
crs(c1)
st_crs(c1)
c1geo <- st_set_crs(c1, 4326)
c1dnl <- aggregate(x=p1_dnl, by=c1geo, FUN=mean)
c1geo <- st_set_crs(c1, st_crs(p1_dn1))
st_crs(c1)
c1geo <- st_set_crs(c1, 4326)
p1_dnl_geo <- st_set_crs(c1, 4326)
c1dnl <- aggregate(x=p1_dnl_geo, by=c1geo, FUN=mean)
head(c1dnl)
plot(p1[p1$STATEFP=='06',])
plot(c1[c1$STATEFP=='06',])
plot(p1_dln_geo[p1_dnl_geo$STATEFP=='06',])
plot(p1_dnl_geo[p1_dnl_geo$STATEFP=='06',])
points(c1[c1$STATEFP=='06',])
points(c1geo)
type(c1)
class(c1)
plot(c1)
st_crs(c1)
st_crs(c1geo)
st_crs(pl_dnl_geo)
st_crs(p1_dnl_geo)
warnings()
c1dnl <- sf::aggregate(x=p1_dnl_geo, by=c1geo, FUN=mean)
c1dnl <- aggregate(x=p1_dnl_geo, by=c1geo, FUN=mean)
plot(c2dnl)
plot(c1dnl)
head(c1dnl)
head(p1_dnl_geo)
head(p1_dnl)
p1_dnl_geo <- st_set_crs(p1_dnl, 4326)
c1dnl <- aggregate(x=p1_dnl_geo, by=c1geo, FUN=mean)
head(c1dnl)
head(p1_dnl)
p1_dnl = p1[c("mymean","geometry")]
head(p1_dnl)
c1dnl <- aggregate(x=p1_dnl, by=c1geo, FUN=mean)
st_crs(p1_dnl)
p1_dnl_geo st_transform(p1_dnl, 4326)
p1_dnl_geo <- st_transform(p1_dnl, 4326)
c1dnl <- aggregate(x=p1_dnl_geo, by=c1geo, FUN=mean)
head(c1dnl)
plot(c1dnl)
st_write(c1dnl, "countymean_dnl.geojson",delete_dsn=TRUE)
summary(c1dnl$mymean)
c1dnl$cat <- "low"
table(c1dnl$cat)
c1dnl$cat <- ifelse(c1dnl$mymean >= 50, "med",  c1dnl$cat)
table(c1dnl$cat)
c1dnl$cat <- ifelse(c1dnl$mymean >= 54, "high", c1dnl$cat)
table(c1dnl$cat)
st_write(c1dnl, "countymean_dnl.geojson",delete_dsn=TRUE)
summary(c1dnl$mymean)
table(c1dnl$cat)
